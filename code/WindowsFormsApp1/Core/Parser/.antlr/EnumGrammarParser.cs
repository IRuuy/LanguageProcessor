//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/manga/Desktop/Новая папка/AntlrCSharp/EnumGrammar.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class EnumGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		DIGIT=1, LETTER=2, SPACE=3, UNDER_LINE=4, COMMA=5, EOS=6, QOUTE=7, LPAR=8, 
		RPAR=9, CREATE=10, AS=11, ENUM=12, TYPE=13;
	public const int
		RULE_stmt = 0, RULE_create = 1, RULE_type = 2, RULE_id = 3, RULE_idRem = 4, 
		RULE_as = 5, RULE_enum = 6, RULE_open = 7, RULE_string = 8, RULE_stringRem = 9, 
		RULE_endString = 10, RULE_close = 11;
	public static readonly string[] ruleNames = {
		"stmt", "create", "type", "id", "idRem", "as", "enum", "open", "string", 
		"stringRem", "endString", "close"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'_'", "','", "';'", "'''", "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "DIGIT", "LETTER", "SPACE", "UNDER_LINE", "COMMA", "EOS", "QOUTE", 
		"LPAR", "RPAR", "CREATE", "AS", "ENUM", "TYPE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "EnumGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static EnumGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public EnumGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public EnumGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(EnumGrammarParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CreateContext create() {
			return GetRuleContext<CreateContext>(0);
		}
		public StmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt; } }
	}

	[RuleVersion(0)]
	public StmtContext stmt() {
		StmtContext _localctx = new StmtContext(Context, State);
		EnterRule(_localctx, 0, RULE_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 24;
			Match(CREATE);
			State = 25;
			create();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(EnumGrammarParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public CreateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create; } }
	}

	[RuleVersion(0)]
	public CreateContext create() {
		CreateContext _localctx = new CreateContext(Context, State);
		EnterRule(_localctx, 2, RULE_create);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 27;
			Match(TYPE);
			State = 28;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LETTER() { return GetToken(EnumGrammarParser.LETTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 4, RULE_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 30;
			Match(LETTER);
			State = 31;
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LETTER() { return GetToken(EnumGrammarParser.LETTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdRemContext idRem() {
			return GetRuleContext<IdRemContext>(0);
		}
		public IdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id; } }
	}

	[RuleVersion(0)]
	public IdContext id() {
		IdContext _localctx = new IdContext(Context, State);
		EnterRule(_localctx, 6, RULE_id);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 33;
			Match(LETTER);
			State = 34;
			idRem();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdRemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LETTER() { return GetToken(EnumGrammarParser.LETTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdRemContext idRem() {
			return GetRuleContext<IdRemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(EnumGrammarParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AsContext @as() {
			return GetRuleContext<AsContext>(0);
		}
		public IdRemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idRem; } }
	}

	[RuleVersion(0)]
	public IdRemContext idRem() {
		IdRemContext _localctx = new IdRemContext(Context, State);
		EnterRule(_localctx, 8, RULE_idRem);
		try {
			State = 40;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LETTER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 36;
				Match(LETTER);
				State = 37;
				idRem();
				}
				break;
			case AS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 38;
				Match(AS);
				State = 39;
				@as();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(EnumGrammarParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumContext @enum() {
			return GetRuleContext<EnumContext>(0);
		}
		public AsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_as; } }
	}

	[RuleVersion(0)]
	public AsContext @as() {
		AsContext _localctx = new AsContext(Context, State);
		EnterRule(_localctx, 10, RULE_as);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42;
			Match(ENUM);
			State = 43;
			@enum();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(EnumGrammarParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OpenContext open() {
			return GetRuleContext<OpenContext>(0);
		}
		public EnumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum; } }
	}

	[RuleVersion(0)]
	public EnumContext @enum() {
		EnumContext _localctx = new EnumContext(Context, State);
		EnterRule(_localctx, 12, RULE_enum);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 45;
			Match(LPAR);
			State = 46;
			open();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QOUTE() { return GetToken(EnumGrammarParser.QOUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public OpenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_open; } }
	}

	[RuleVersion(0)]
	public OpenContext open() {
		OpenContext _localctx = new OpenContext(Context, State);
		EnterRule(_localctx, 14, RULE_open);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48;
			Match(QOUTE);
			State = 49;
			@string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LETTER() { return GetToken(EnumGrammarParser.LETTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringRemContext stringRem() {
			return GetRuleContext<StringRemContext>(0);
		}
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 16, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			Match(LETTER);
			State = 52;
			stringRem();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringRemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LETTER() { return GetToken(EnumGrammarParser.LETTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringRemContext stringRem() {
			return GetRuleContext<StringRemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QOUTE() { return GetToken(EnumGrammarParser.QOUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EndStringContext endString() {
			return GetRuleContext<EndStringContext>(0);
		}
		public StringRemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringRem; } }
	}

	[RuleVersion(0)]
	public StringRemContext stringRem() {
		StringRemContext _localctx = new StringRemContext(Context, State);
		EnterRule(_localctx, 18, RULE_stringRem);
		try {
			State = 58;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LETTER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 54;
				Match(LETTER);
				State = 55;
				stringRem();
				}
				break;
			case QOUTE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 56;
				Match(QOUTE);
				State = 57;
				endString();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(EnumGrammarParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CloseContext close() {
			return GetRuleContext<CloseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(EnumGrammarParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OpenContext open() {
			return GetRuleContext<OpenContext>(0);
		}
		public EndStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endString; } }
	}

	[RuleVersion(0)]
	public EndStringContext endString() {
		EndStringContext _localctx = new EndStringContext(Context, State);
		EnterRule(_localctx, 20, RULE_endString);
		try {
			State = 64;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RPAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 60;
				Match(RPAR);
				State = 61;
				close();
				}
				break;
			case COMMA:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 62;
				Match(COMMA);
				State = 63;
				open();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CloseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOS() { return GetToken(EnumGrammarParser.EOS, 0); }
		public CloseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_close; } }
	}

	[RuleVersion(0)]
	public CloseContext close() {
		CloseContext _localctx = new CloseContext(Context, State);
		EnterRule(_localctx, 22, RULE_close);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66;
			Match(EOS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,13,69,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,
		2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,4,3,4,41,8,4,1,5,1,5,1,5,1,6,1,6,1,6,1,
		7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,9,3,9,59,8,9,1,10,1,10,1,10,1,10,3,
		10,65,8,10,1,11,1,11,1,11,0,0,12,0,2,4,6,8,10,12,14,16,18,20,22,0,0,59,
		0,24,1,0,0,0,2,27,1,0,0,0,4,30,1,0,0,0,6,33,1,0,0,0,8,40,1,0,0,0,10,42,
		1,0,0,0,12,45,1,0,0,0,14,48,1,0,0,0,16,51,1,0,0,0,18,58,1,0,0,0,20,64,
		1,0,0,0,22,66,1,0,0,0,24,25,5,10,0,0,25,26,3,2,1,0,26,1,1,0,0,0,27,28,
		5,13,0,0,28,29,3,4,2,0,29,3,1,0,0,0,30,31,5,2,0,0,31,32,3,6,3,0,32,5,1,
		0,0,0,33,34,5,2,0,0,34,35,3,8,4,0,35,7,1,0,0,0,36,37,5,2,0,0,37,41,3,8,
		4,0,38,39,5,11,0,0,39,41,3,10,5,0,40,36,1,0,0,0,40,38,1,0,0,0,41,9,1,0,
		0,0,42,43,5,12,0,0,43,44,3,12,6,0,44,11,1,0,0,0,45,46,5,8,0,0,46,47,3,
		14,7,0,47,13,1,0,0,0,48,49,5,7,0,0,49,50,3,16,8,0,50,15,1,0,0,0,51,52,
		5,2,0,0,52,53,3,18,9,0,53,17,1,0,0,0,54,55,5,2,0,0,55,59,3,18,9,0,56,57,
		5,7,0,0,57,59,3,20,10,0,58,54,1,0,0,0,58,56,1,0,0,0,59,19,1,0,0,0,60,61,
		5,9,0,0,61,65,3,22,11,0,62,63,5,5,0,0,63,65,3,14,7,0,64,60,1,0,0,0,64,
		62,1,0,0,0,65,21,1,0,0,0,66,67,5,6,0,0,67,23,1,0,0,0,3,40,58,64
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
